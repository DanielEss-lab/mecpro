#!/bin/bash
#SBATCH --time=~WALLTIME~       # walltime
#SBATCH --nodes=1   --ntasks=1  # Limit the program to one node if possible
#SBATCH --cpus-per-task=~CORES~ # number of processor cores (i.e. tasks)
#SBATCH --mem-per-cpu=~MEM~     # memory per CPU core
#SBATCH -J "~JOB~"              # job name
#SBATCH --signal=SIGTERM@120     # terminate this at least 120 seconds before the end of the walltime
#SBATCH -C rhel7
~EMAIL~
~ISTEST~

#Copyright (c) 2019 Brigham Young University

#See the file license.txt for copying permission.

# Variables needed for the job
export PBS_NODEFILE=`/fslapps/fslutils/generate_pbs_nodefile`
export TEMPORARY_DIR="/tmp/$SLURM_JOB_ID"
export JOBNAME=~JOB~
export JOBSOURCE="$SLURM_SUBMIT_DIR"

cleanup_scratch () {
    echo "Copying resulting data to $JOBSOURCE"
    cp -v "$TEMPORARY_DIR/$JOBNAME"*.{log,com,next.mecp,chk} "$JOBSOURCE/"
    echo "---"

    echo "Changing directory back to submission directory at $PBS_O_WORKDIR"
    cd "$SLURM_SUBMIT_DIR"

    #delete directory
    echo "Deleting directories at end of script"
    rm -rfv "$TEMPORARY_DIR"
}

#basic diagnostic output
echo "---"
echo "Beginning-of-job Diagnostic information:"
echo "---"
echo "Nodes assigned:"
cat "$PBS_NODEFILE"
echo "---"
echo "Temporary Directory:"
echo "$TEMPORARY_DIR"
echo "---"
echo "Job Source Directory:"
echo "$JOBSOURCE"
echo "---"
echo "Current Time:"
date
echo "---"

#create temporary directory
mkdir -p "$TEMPORARY_DIR" 2>&1

#copy working data information from $JOBSOURCE/$JOBNAME to $TEMPORARY_DIR
echo "Copying working data information from $JOBSOURCE/ to $TEMPORARY_DIR"
cp -v "$JOBSOURCE/$JOBNAME.mecp" "$TEMPORARY_DIR/$JOBNAME.mecp"
if test -e "$JOBSOURCE/$JOBNAME"_A.chk; then
    cp -v "$JOBSOURCE/$JOBNAME"_{A,B}.chk "$TEMPORARY_DIR/"
fi
if test -e "$JOBSOURCE/$JOBNAME".log; then
    cp -v "$JOBSOURCE/$JOBNAME".log "$TEMPORARY_DIR/"
fi
echo "---"

#changing directory to $TEMPORARY_DIR
echo "Changing directory to temporary dir at $TEMPORARY_DIR"
cd "$TEMPORARY_DIR"
echo "---"

echo "Starting MECP Optimization at:"
date

#the actual MECP run starts here
python $MECPRO_HOME/pylib/mecp.py $JOBNAME &
pid=$!
trap "kill $pid; cleanup_scratch; exit 1" TERM
wait $pid

echo "---"
echo "MECP Optimization ended at:"
date
echo "---"

cleanup_scratch

echo "---"
echo "Job ending time:"
date
echo "---"
